//堆结构是一种隐式数据结构
//但是面对优先队列中需要合并的时候，我们就要其他的数据结构，如：左高树（leftist tree）
//external node(代替树中的空子树)
//令s(x)是从x到其子树的外部节点的所有路径中最短的一条
/*
若x为exnode：s=0
else： s(x)=min{s(x.L),s(x.R)}+1
定义：一棵二叉树是高度优先左高树(HBLT) == 其每一个内部节点的左孩子的s值>=右孩子的s值

若x为exnode：w=0
else: w(x)=w(x.L)+w(x.R)+1
定义：一棵二叉树是重量优先左高树(WBLT) == 其每一个内部节点的左孩子的w值>=右孩子的w值
*/
